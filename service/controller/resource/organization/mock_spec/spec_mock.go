// Code generated by MockGen. DO NOT EDIT.
// Source: service/controller/resource/organization/spec.go

// Package mock_organization is a generated GoMock package.
package mock_organization

import (
	context "context"
	reflect "reflect"

	client "github.com/giantswarm/companyd-client-go"
	lister "github.com/giantswarm/credentiald/v2/service/lister"
	gomock "github.com/golang/mock/gomock"
)

// MockCompanydClient is a mock of CompanydClient interface.
type MockCompanydClient struct {
	ctrl     *gomock.Controller
	recorder *MockCompanydClientMockRecorder
}

// MockCompanydClientMockRecorder is the mock recorder for MockCompanydClient.
type MockCompanydClientMockRecorder struct {
	mock *MockCompanydClient
}

// NewMockCompanydClient creates a new mock instance.
func NewMockCompanydClient(ctrl *gomock.Controller) *MockCompanydClient {
	mock := &MockCompanydClient{ctrl: ctrl}
	mock.recorder = &MockCompanydClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanydClient) EXPECT() *MockCompanydClientMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanydClient) CreateCompany(companyID string, fields client.CompanyFields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", companyID, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanydClientMockRecorder) CreateCompany(companyID, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanydClient)(nil).CreateCompany), companyID, fields)
}

// DeleteCompany mocks base method.
func (m *MockCompanydClient) DeleteCompany(companyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", companyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompanydClientMockRecorder) DeleteCompany(companyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompanydClient)(nil).DeleteCompany), companyID)
}

// MockCredentialdClient is a mock of CredentialdClient interface.
type MockCredentialdClient struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialdClientMockRecorder
}

// MockCredentialdClientMockRecorder is the mock recorder for MockCredentialdClient.
type MockCredentialdClientMockRecorder struct {
	mock *MockCredentialdClient
}

// NewMockCredentialdClient creates a new mock instance.
func NewMockCredentialdClient(ctrl *gomock.Controller) *MockCredentialdClient {
	mock := &MockCredentialdClient{ctrl: ctrl}
	mock.recorder = &MockCredentialdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialdClient) EXPECT() *MockCredentialdClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockCredentialdClient) List(ctx context.Context, request lister.Request) ([]lister.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, request)
	ret0, _ := ret[0].([]lister.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCredentialdClientMockRecorder) List(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCredentialdClient)(nil).List), ctx, request)
}
